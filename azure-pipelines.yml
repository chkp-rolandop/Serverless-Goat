# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

stages:
- stage: Build
pool:
  vmImage: 'ubuntu-latest'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      npm install
      npm install -g https://artifactory.app.protego.io/cloudguard-serverless-plugin.tgz
    displayName: 'npm install'

  - task: DockerInstaller@0
    inputs:
      dockerVersion: '17.09.0-ce'
    displayName: 'Install Docker'

  - task: AWSShellScript@1
    inputs:
        awsCredentials: 'aws-rolandopcp'
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          cloudguard proact -t $(CLOUDGUARD_TOKEN)
          cloudguard fsp -C template.yml --region $(AWS_REGION)
          sam package --s3-bucket=$(S3_BUCKET)  -t template.protected.yml --output-template-file output.template.yml
    displayName: 'Run Cloudguard Proact, Enable FSP and package'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/cloudguard_output'
      artifact: 'cloudguard_output'
      publishLocation: 'pipeline'
    displayName: 'Publishing Artifacts'
  
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)/output.template.yml
      artifact: outputtemplate
      publishLocation: 'pipeline'

  - stage: Deploy
  - steps:
  - task: DownloadA
  - task: AWSShellScript@1
    inputs:
        awsCredentials: 'aws-rolandopcp'
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          sam deploy -t output.template.yml --stack-name serverlessgoat-lab --s3-bucket $(S3_BUCKET) --capabilities CAPABILITY_IAM --parameter-overrides ServiceCount=1
    displayName: 'Deploy SAM Package'